<launch>
  <!-- specify fake robot or not -->
  <arg name="fake_execution" default="false"/>
  <param name="fake_execution" type="bool" value="$(arg fake_execution)"/>

  <!-- specify parameters for nkg_exe/nkg_arm -->
  <param name="init_home_en" type="bool" value="true" />
  <param name="method" type="int" value="1" />
  <param name="space" type="int" value="0" />
  <param name="test" type="bool" value="true" />

  <!-- specify the planning pipeline -->
  <arg name="pipeline" default="ompl" />

  <!-- By default, we do not start a database (it can be large) -->
  <arg name="db" default="false" />
  <!-- Allow user to specify database location -->
  <arg name="db_path" default="$(find nkg_moveit_config)/default_warehouse_mongo_db" />

  <!-- By default, we are not in debug mode -->
  <arg name="debug" default="false" />

  <!--
  By default, hide joint_state_publisher's GUI

  MoveIt's "demo" mode replaces the real robot driver with the joint_state_publisher.
  The latter one maintains and publishes the current joint configuration of the simulated robot.
  It also provides a GUI to move the simulated robot around "manually".
  This corresponds to moving around the real robot without the use of MoveIt.
  -->
  <arg name="use_gui" default="false" />

  <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
  <include file="$(find nkg_moveit_config)/launch/planning_context.launch">
    <arg name="load_robot_description" value="true"/>
  </include>

  <!-- If needed, broadcast static tf for robot root -->
  
  <!-- We do not have a robot connected, so publish fake joint states -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" if="$(arg fake_execution)">
    <param name="use_gui" value="$(arg use_gui)"/>
    <param name="rate" value="50"/>
    <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
  </node>

  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

  <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
  <include file="$(find nkg_moveit_config)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="fake_execution" value="$(arg fake_execution)"/>
    <arg name="info" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="pipeline" value="$(arg pipeline)"/>
  </include>

  <!-- Run Rviz and load the default config to see the state of the move_group node -->
  <include file="$(find nkg_moveit_config)/launch/moveit_rviz.launch">
    <arg name="rviz_config" value="$(find nkg_moveit_config)/launch/moveit.rviz"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

  <!-- If database loading was enabled, start mongodb as well -->
  <include file="$(find nkg_moveit_config)/launch/default_warehouse_db.launch" if="$(arg db)">
    <arg name="moveit_warehouse_database_path" value="$(arg db_path)"/>
  </include>

  <!-- ################################################### -->
  <!--node pkg="nkg_exe" type="nkg_exe_node" name="nkg_exe_node"/-->

  <!-- Planning Functionality -->
  <include ns="nkg_exe_node" file="$(find nkg_moveit_config)/launch/planning_pipeline.launch.xml">
    <arg name="pipeline" value="$(arg pipeline)" />
  </include>

  <!-- Trajectory Execution Functionality -->
  <include ns="nkg_exe_node" file="$(find nkg_moveit_config)/launch/trajectory_execution.launch.xml">
    <arg name="moveit_manage_controllers" value="true" />
    <arg name="moveit_controller_manager" value="NKG_ROBOT" unless="$(arg fake_execution)"/>
    <arg name="moveit_controller_manager" value="fake" if="$(arg fake_execution)"/>
  </include>

  <!-- Sensors Functionality >
  <include ns="nkg_exe_node" file="$(find nkg_moveit_config)/launch/sensor_manager.launch.xml">
    <arg name="moveit_sensor_manager" value="NKG_ROBOT" />
  </include-->

  <!-- Hardware Interface for ros_control -->
  <include file="$(find nkg_hardware_interface)/launch/nkg_ros_controllers.launch" unless="$(arg fake_execution)"/>

  <!-- Serial Node for package tx/rx -->
  <node name="nkg_serial_node" pkg="nkg_serial" type="nkg_serial_node" output="screen" unless="$(arg fake_execution)"/>

  <!-- RealSense Camera -->
  <include file="$(find realsense2_camera)/launch/rs_rgbd.launch">
    <arg name="enable_infra1" value="false"/>
    <arg name="enable_infra2" value="false"/>
    <arg name="depth_fps" value="15"/>
    <arg name="color_fps" value="15"/>
  </include>

  <!-- Static tf between camera and robot -->
  <node pkg="tf" type="static_transform_publisher" name="realsense2mount" args="0 0 0 0 ${M_PI*0.45} 0 mount_link camera_link 30"/>

  <!--node name="nkg_image_preprocessing2D_node" pkg="nkg_image_preprocessing" type="nkg_image_preprocessing2D_node" output="screen"/-->
</launch>
